## hidden code\n\ndef mk_coverage():\n    covered = set()\n    target = set(range(6))\n    count = 0\n    original = None\n    \n    def coverage(func):\n        nonlocal covered, target, count, original\n    \n        def wrapper(it):\n            nonlocal covered, count\n            lit = list (it)\n            r = func (lit)\n            count += 1\n            if lit == []:\n                covered.add(0)\n            elif len (lit) == 1:\n                covered.add(1)\n            else:\n                covered.add(2)\n            if "" in lit:\n                covered.add (3)\n            if len (lit) > 1:\n                if [line for line in lit if [x for x in line if x in string.whitespace]]:\n                    covered.add (4)\n                else:\n                    covered.add (5)\n            return r\n        if func == "achieved": return len(covered)\n        if func == "required": return len(target)\n        if func == "count" : return count\n        if func == "original": return original\n        original = func\n        functools.update_wrapper (wrapper, func)\n        return wrapper\n    return coverage\n\ncoverage = mk_coverage()\ntry:\n    word_count_iter = coverage(word_count_iter)\nexcept:\n    pass\n\n## Lösung Teil 3. (Tests)\n\n## revert\ntry:\n    word_count_iter = word_count_iter.__wrapped__\nexcept:\n    pass\n\n## Lösung Teil 4.\ndef word_count(f) -> tuple:\n    if f is None:\n        return ()\n    else:\n        lines = 0\n        with open(f, "r") as file:\n            for line in file:\n                lines += 1\n            return(lines)\n            \n######################################################################\n## hidden test code\npytest.main (["-v", "--assert=plain", "-p", "no:cacheprovider"])\n\nfrom inspect import getfullargspec\nclass TestNames:\n    def test_nwords (self):\n        assert nwords\n        assert \'s\' in getfullargspec(nwords).args\n    def test_word_count_iter(self):\n        assert word_count_iter\n        \n    def test_word_count(self):\n        assert word_count\n        assert \'file\' in getfullargspec(word_count).args\n\nclass TestGrades:\n    def test_docstring_present(self):\n        assert nwords.__doc__ is not None\n        assert word_count_iter.__doc__ is not None\n        assert word_count.__doc__ is not None\n    \n    def test_typing_present (self):\n        assert nwords.__annotations__ == self.nwords_oracle.__annotations__\n        assert word_count_iter.__annotations__ == self.word_count_iter_oracle.__annotations__\n        assert word_count.__annotations__ == self.word_count_oracle.__annotations__\n\n    def nwords_oracle (self, s:str) -> int:\n        return len (s.split())\n\n    def test_nwords(self):\n        charset = string.printable\n        for i in range (100):\n            s = \'\'.join (random.choice (charset) for j in range (1000))\n            assert nwords (s) == self.nwords_oracle (s)\n\n    def word_count_iter_oracle(self, iter):\n        lines = 0\n        words = 0\n        chars = 0\n        for line in iter:\n            lines += 1\n            chars += len(line)\n            r = line.split()\n            words += len(r)\n        return (lines, words, chars)\n\n    def test_wci_empty (self):\n        assert word_count_iter ([]) == (0,0,0)\n\n    def test_wci_one (self):\n        assert word_count_iter (["a"]) == (1, 1, 1)\n\n    def test_wci_simple (self):\n        for i in range (50):\n            assert word_count_iter (i * ["a"]) == (i,i,i)\n\n    def test_wci_scale (self):\n        for i in range (20):\n            assert word_count_iter (i * ["a bb"]) == (i, 2*i, 4*i)\n\n    def test_word_count_iter(self):\n        charset = string.printable\n        for i in range (100):\n            l = random.randrange (10)\n            subject = [\'\'.join (random.choice (charset) for j in range (1000)) for k in range(l)] \n            assert word_count_iter (subject) == self.word_count_iter_oracle (subject)\n\n    def word_count_oracle(self,file:str):\n        return self.word_count_iter_oracle (open (file))\n\n    def test_some_known_files(self):\n        count = 3\n        try:\n            assert word_count ("/usr/share/dict/words") == (235886, 235886, 2493109)\n        except:\n            count = count - 1\n        try:\n            assert word_count ("/usr/share/doc/libpython3.6-minimal/copyright") == (995, 7030, 49855)\n        except:\n            count = count - 1\n        try:\n            f = "/data/test_code.py"\n            assert word_count (f) == self.word_count_oracle (f)\n        except:\n            count = count - 1\n        assert count > 0